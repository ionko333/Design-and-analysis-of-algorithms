#include <iostream>
#include <queue>
#include <vector>
#include <utility>
#include <climits>
using namespace std;

vector<pair<int, int> > graph [10001];      ///assuming the vertices are 1,2,...,n
int dist[10001];
int parent[10001];
int used[10001];
vector<pair<int, int> > mst [10001];

void prim(int start, int n)
{
    for(int i = 1; i <= n; i++)
    {
        dist[i] = INT_MAX;
    }
    dist[start] = 0;
    parent[start] = -1;
    priority_queue<pair<int, int> , vector< pair<int, int> > , greater<pair<int, int> > > q;
    q.push({0,start});
    while(!q.empty())
    {
        int node = q.top().second;
        q.pop();
        if(used[node])
        {
            continue;
        }
        used[node] = 1;
        if(parent[node] != -1)
        {
            mst[node].push_back({parent[node],dist[node]});
            mst[parent[node]].push_back({node,dist[node]});
        }
        for(int i = 0; i < graph[node].size(); i++)
        {
            pair<int, int> edge = graph[node][i];
            int to = edge.first;
            int cost = edge.second;
            if(!used[to] && dist[to] > cost)
            {
                dist[to] = cost;
                parent[to] = node;
                q.push({dist[to], to});
            }

        }
    }
}

int main()
{
    int n, m;
    cin >> n >> m;
    int a = 0, b = 0, c = 0;
    int sum = 0;
    for(int i = 0; i < m; i++)
    {
        cin >> a >> b >> c;
        ///cout << "Reading " << a << b << c << endl;
        graph[a].push_back({b,c});
        graph[b].push_back({a,c});
    }
    prim(a, sum);
    ///uncomment to print the tree
    /*for(int i = 1; i <= n; i++)
    {
        for(int j = 0; j < mst[i].size(); j++)
        {
            cout << i << " " << mst[i][j].first << " " << mst[i][j].second << endl;
        }
    }
    */
    return 0;
}

