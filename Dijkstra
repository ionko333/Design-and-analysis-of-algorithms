#include <iostream>
#include <vector>
#include <stdio.h>
#include <queue>
#include <climits>
#include <utility>

using namespace std;

const int MAXSIZE = 100000;
struct Edge
{
    int to;
    int weight;
};

vector<Edge> graph[MAXSIZE];     /// graph[i] contains the end and weight of <i,end,weight>
int dist[MAXSIZE] = {0};         /// this array will contain the minimum distance from the starting vertex to all the other vertices
int visited[MAXSIZE] = {0};      /// this array will indicate whether we have visited the i-th vertex or not

void initDirectedGraph()
{
    int n, m;                     /// n stands for the number of vertices and m stands for the number of edges
    int from, to, weight = 0;     ///initializing here so we don't have to create them again every time in the loop
    scanf("%d %d",&n, &m);        /// reading input
    for (int i = 0; i < m; ++i)   ///reading the edges
    {
        scanf("%d %d %d",&from, &to, &weight);
        graph[from].push_back({to,weight});   /// adding the edge
    }
}

void initUnDirectedGraph()
{
    int n, m;                     /// n stands for the number of vertices and m stands for the number of edges
    int from, to, weight = 0;     ///initializing here so we don't have to create them again every time in the loop
    scanf("%d %d",&n, &m);        /// reading input
    for (int i = 0; i < m; ++i)   ///reading the edges
    {
        scanf("%d %d %d",&from, &to, &weight);
        graph[from].push_back({to,weight});/// adding the edge
        graph[to].push_back({from,weight});///since the graph is undirected if there is an edge from i to j there is one from j to i
    }
}
void dijkstra(int start, int n)
{
    int node;
    for(int i = 0; i < n; ++i)            /// initializing all the distances with "infinity"
    {
        dist[i] = INT_MAX/10;             /// its max/10 because when we add an integer to it the number type will overflow
    }
    priority_queue<pair<int,int>, vector<pair<int,int> >, greater<pair<int,int> > > q;   /// priority queue of pairs... the top is the one with lowest first
    dist[start] = 0;                                                                     /// obviously the distance to the starting vertex is 0
    q.push({0,start});
    while (!q.empty())                                                                   /// while there are elements in the queue
    {
        node = q.top().second;
        q.pop();
        if (visited[node])
        {
            continue;                                                                   /// nothing to do here
        }
        visited[node] = 1;                                                              /// mark as visited
        for (int i = 0; i < graph[node].size(); ++i)                                    /// for all neighbours of node
        {
            Edge temp = graph[node][i];
            if (visited[temp.to])                                                       /// if we have visited the end we have nothing to do here
            {
                continue;
            }
            if (dist[temp.to] > dist[node] + temp.weight)                               /// if we have found a smaller distance than the previous one we update dist
            {
                dist[temp.to] = dist[node] + temp.weight;
                q.push({dist[temp.to],temp.to});                                        /// and we push it in the queue
            }
        }
    }
}

void printDistances(int n, int start)
{
    for(int i = 0; i < n; ++i)
    {
        printf("The distance from " << start << " to " << i << " is %d\n",dist[i]);
    }
}
int main()
{
    return 0;
}

/*
13 18
0 1 3
0 3 4
0 12 7
1 12 2
1 3 4
1 7 1
2 11 2
2 12 3
3 5 5
4 6 2
4 10 5
5 7 3
6 7 2
8 9 6
8 10 4
8 11 4
9 10 4
9 11 4
12
*/
///Example input for a graph with 13 vertices, 18 edges and starting edge 12
///answer: 5 2 3 6 7 6 5 3 9 9 12 5 0

