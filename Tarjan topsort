#include <iostream>

#include <vector>

#include <algorithm>

using namespace std;



enum Color {white, gray, black}; ///white means unvisited, gray means visited but we are not done with it yet (there are neighbours to be visited) and black means - done with it

int n, m;

vector<int> graph[1000];         ///similar to an adjacency list

Color colors[1000];              ///contains the color of each vertex

vector<int> vertices;

int topSort[1000];


void init()

{

    int u = 0, v = 0;

    cin >> n >> m;

    for (int i = 0; i < m; i++)

    {

        cin >> u >> v;

        graph[u].push_back(v);

    }

    for (int i = 1; i <= n; i++)

    {

        colors[i] = white;

    }

}



void DFS_Visit(int x)

{

    colors[x] = gray;

    for (int i = 0; i < graph[x].size(); i++)

    {

        int v = graph[x][i];

        if (colors[v] == white)

        {


            DFS_Visit(v);

        }

    }

    colors[x] = black;
    vertices.push_back(x);

}



void DFS()

{

    for (int i = 1; i <= n; i++)

    {

        if (colors[i] == white)

        {

            DFS_Visit(i);

        }

    }

}

void getTopSort()
{
    reverse(vertices.begin(), vertices.end());
    for(int i = 0; i < n; i++)
    {
        topSort[i + 1] = vertices[i];
    }
}

int main()

{

    init();
    DFS();
    getTopSort();
    ///now topSort[1,2,...,n] contains the vertices in a topological order

    return 0;

}
